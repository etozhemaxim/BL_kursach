import math
from math import *
import itertools
import numpy as np

from baza_powder import powders_db

# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Ä–æ—Ö–æ–≤
def classify_powder(powder_name):
    """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ—Ä–æ—Ö –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–∏–º–≤–æ–ª—É –Ω–∞–∑–≤–∞–Ω–∏—è"""
    first_char = powder_name.strip()[0]
    if first_char.isalpha():  # –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –±—É–∫–≤—ã - –±–∞–ª–ª–∏—Å—Ç–∏—Ç–Ω—ã–π
        return 'ballistic'
    else:  # –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –¥—Ä–æ–±–∏ - –ø–∏—Ä–æ–∫—Å–∏–ª–∏–Ω–æ–≤—ã–π
        return 'pyroxylin'

# –†–∞–∑–¥–µ–ª—è–µ–º –±–∞–∑—É –ø–æ—Ä–æ—Ö–æ–≤ –ø–æ —Ç–∏–ø–∞–º –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º B_values –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä–æ—Ö–∞
pyroxylin_powders = {}
ballistic_powders = {}

for name, data in powders_db.items():
    powder_type = classify_powder(name)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º B_value –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç z_e
    if data['z_e'] == 1:
        B_value = 4.5  # –æ–¥–Ω–æ–∫–∞–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ—Ö
    else:
        B_value = 2.0  # –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ—Ö
    
    # –î–æ–±–∞–≤–ª—è–µ–º B_value –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ—Ö–∞
    data['B_value'] = B_value
    
    if powder_type == 'pyroxylin':
        pyroxylin_powders[name] = data
    else:
        ballistic_powders[name] = data

print(f"–ü–∏—Ä–æ–∫—Å–∏–ª–∏–Ω–æ–≤—ã–µ –ø–æ—Ä–æ—Ö–∞: {len(pyroxylin_powders)} —à—Ç.")
print(f"–ë–∞–ª–ª–∏—Å—Ç–∏—Ç–Ω—ã–µ –ø–æ—Ä–æ—Ö–∞: {len(ballistic_powders)} —à—Ç.")

# –ü–ê–†–ê–ú–ï–¢–†–´ –î–õ–Ø –î–í–£–• –¢–ò–ü–û–í –£–°–õ–û–í–ù–´–• –ü–û–†–û–•–û–í
# –ë–∞–ª–ª–∏—Å—Ç–∏—Ç–Ω—ã–π –ø–æ—Ä–æ—Ö (–î–ì-3)
ballistic_params = {
    'name': '–ë–∞–ª–ª–∏—Å—Ç–∏—Ç–Ω—ã–π (–î–ì-3)',
    'f': 0.968e6,  # –î–∂/–∫–≥
    'k': 1.25,
    'b': 1.113e-3,  # –º¬≥/–∫–≥
    'delta': 1520,  # –∫–≥/–º¬≥
    'z_e': 1,
    'kappa': 1,
    'lambda_val': 0,
    'K_f': 0.0004,
    'K_l': 0.0022
}

# –ü–∏—Ä–æ–∫—Å–∏–ª–∏–Ω–æ–≤—ã–π –ø–æ—Ä–æ—Ö
pyroxylin_params = {
    'name': '–ü–∏—Ä–æ–∫—Å–∏–ª–∏–Ω–æ–≤—ã–π',
    'f': 1.0e6,  # –î–∂/–∫–≥
    'k': 1.23,
    'b': 1.0e-3,  # –º¬≥/–∫–≥
    'delta': 1600,  # –∫–≥/–º¬≥
    'z_e': 1,
    'kappa': 1,
    'lambda_val': 0,
    'K_f': 0.0003,
    'K_l': 0.0016
}

# –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–æ–∏—Ö —Å–ª—É—á–∞–µ–≤
v_pm = 900  # –¥—É–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
d = 0.1524
p_ign = 1e6
q = 54  # –º–∞—Å—Å–∞ —Å–Ω–∞—Ä—è–¥–∞, –∫–≥ 
phi_1 = 1.02
omega_ign = 0.01
S = pi * d**2 / 4

# –î–∏–∞–ø–∞–∑–æ–Ω—ã –≤–∞—Ä—å–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –ø—É—à–µ–∫ –≤—ã—Å–æ–∫–æ–π –º–æ—â–Ω–æ—Å—Ç–∏)
vardelta_values = list(range(650, 781, 10))  # –∫–≥/–º¬≥
eta_rm_values = list(np.arange(0.1, 0.6, 0.1))  # r_m –æ—Ç 0.1 –¥–æ 0.5
# B_values –±–æ–ª—å—à–µ –Ω–µ –≤–∞—Ä—å–∏—Ä—É–µ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä–æ—Ö–∞

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–º–ø—É–ª—å—Å–∞
MAX_IMPULSE = 2.71

def I_e(vardelta, r_m, B, params):
    """–†–∞—Å—á–µ—Ç –º–∞—Å—Å—ã –ø–æ—Ä–æ—Ö–∞ –∏ –∏–º–ø—É–ª—å—Å–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    f = params['f']
    k = params['k']
    b_val = params['b']
    delta = params['delta']
    
    zeta = (p_ign / f) * (1 / vardelta - 1 / delta) * 1 / (1 + (b_val * p_ign) / f)  
    
    omega = (phi_1 * q) / (((2 * f) / ((k - 1) * v_pm**2)) * r_m - (zeta + 1) / 3)
    
    phi = phi_1 * (1 / (3 * q)) * (omega_ign + omega)
    
    I_e_val = (math.sqrt(f * omega * phi * q * B) / S) / 10**6
    
    return omega, I_e_val

def find_matching_powders(target_impulse, powders_db, tolerance=0.1):
    """–ü–æ–∏—Å–∫ –ø–æ—Ä–æ—Ö–æ–≤ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –∏–º–ø—É–ª—å—Å–æ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∞–∑–µ"""
    matching_powders = []
    
    for powder_name, powder_data in powders_db.items():
        powder_impulse = powder_data['I_e']
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Ä–æ—Ö–∞ —Å –∏–º–ø—É–ª—å—Å–æ–º –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
        if powder_impulse > MAX_IMPULSE:
            continue
            
        difference = powder_impulse - target_impulse
        difference_percent = (difference / target_impulse) * 100 if target_impulse != 0 else 0
        
        if abs(difference) <= tolerance:
            matching_powders.append((powder_name, powder_impulse, powder_data, difference, difference_percent))
    
    matching_powders.sort(key=lambda x: abs(x[3]))  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é
    return matching_powders

def vary_parameters_for_powder_type(params, powder_type_name, powders_db):
    """–í–∞—Ä—å–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ—Ä–æ—Ö–∞"""
    results = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ —Å vardelta –∏ r_m, B –±–µ—Ä–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä–æ—Ö–∞
    combinations = list(itertools.product(vardelta_values, eta_rm_values))
    
    print(f"\n{'='*90}")
    print(f"–†–ê–°–ß–ï–¢ –î–õ–Ø {powder_type_name.upper()}")
    print(f"{'='*90}")
    print(f"{'vardelta':<10} {'r_m':<8} {'B':<8} {'omega (–∫–≥)':<15} {'I_e (–ú–ü–∞¬∑—Å)':<15} {'–°—Ç–∞—Ç—É—Å':<10}")
    print("-" * 90)
    
    valid_combinations = 0
    
    for vardelta, r_m in combinations:
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä–æ—Ö–∞ –≤ –±–∞–∑–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å –µ–≥–æ B_value
        for powder_name, powder_data in powders_db.items():
            B = powder_data['B_value']
            omega, impulse = I_e(vardelta, r_m, B, params)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å –∏–º–ø—É–ª—å—Å–æ–º –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
            if impulse > MAX_IMPULSE:
                status = "–ü–†–ï–í–´–®–ï–ù"
                print(f"{vardelta:<10} {r_m:<8.1f} {B:<8} {omega:<15.4f} {impulse:<15.4f} {status:<10}")
                continue
            
            results.append({
                'vardelta': vardelta,
                'r_m': r_m,
                'B': B,
                'omega': omega,
                'I_e': impulse,
                'powder_name': powder_name
            })
            
            status = "OK"
            print(f"{vardelta:<10} {r_m:<8.1f} {B:<8} {omega:<15.4f} {impulse:<15.4f} {status:<10}")
            valid_combinations += 1
    
    # –°–≤–æ–¥–∫–∞ –ø–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º –∏–º–ø—É–ª—å—Å–∞–º
    if results:
        calculated_impulses = [r['I_e'] for r in results]
        print(f"\nüìä –°–í–û–î–ö–ê –ü–û –†–ê–°–°–ß–ò–¢–ê–ù–ù–´–ú –ò–ú–ü–£–õ–¨–°–ê–ú:")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–º–ø—É–ª—å—Å: {min(calculated_impulses):.4f} –ú–ü–∞¬∑—Å")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–º–ø—É–ª—å—Å: {max(calculated_impulses):.4f} –ú–ü–∞¬∑—Å")
        print(f"   –°—Ä–µ–¥–Ω–∏–π –∏–º–ø—É–ª—å—Å: {sum(calculated_impulses)/len(calculated_impulses):.4f} –ú–ü–∞¬∑—Å")
        print(f"   –î–∏–∞–ø–∞–∑–æ–Ω: {min(calculated_impulses):.4f} - {max(calculated_impulses):.4f} –ú–ü–∞¬∑—Å")
        print(f"   –î–æ–ø—É—Å—Ç–∏–º—ã–π –º–∞–∫—Å–∏–º—É–º: {MAX_IMPULSE} –ú–ü–∞¬∑—Å")
    else:
        print(f"\n‚ö†Ô∏è  –ù–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π - –≤—Å–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–º–ø—É–ª—å—Å {MAX_IMPULSE} –ú–ü–∞¬∑—Å")
    
    print(f"–í—Å–µ–≥–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {valid_combinations}")
    return results

def print_detailed_matching_analysis(results, powders_db, powder_type_name):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ—Ä–æ—Ö–æ–≤ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º"""
    if not results:
        print(f"‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {powder_type_name}")
        return
        
    calculated_impulses = [r['I_e'] for r in results]
    avg_impulse = sum(calculated_impulses) / len(calculated_impulses)
    
    print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–õ–Ø {powder_type_name.upper()}:")
    print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –∏–º–ø—É–ª—å—Å: {avg_impulse:.4f} –ú–ü–∞¬∑—Å")
    
    # –ê–Ω–∞–ª–∏–∑ –ª—É—á—à–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –ø–æ—Ä–æ—Ö–∞ —Å –∏–º–ø—É–ª—å—Å–æ–º <= MAX_IMPULSE)
    best_matches = []
    for powder_name, powder_data in powders_db.items():
        powder_impulse = powder_data['I_e']
        if powder_impulse > MAX_IMPULSE:
            continue
            
        difference = abs(powder_impulse - avg_impulse)
        difference_percent = (difference / avg_impulse) * 100
        best_matches.append((powder_name, powder_impulse, difference, difference_percent))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ —Å—Ä–µ–¥–Ω–µ–º—É
    best_matches.sort(key=lambda x: x[2])
    
    print(f"\nüéØ –¢–û–ü-10 —Å–∞–º—ã—Ö –±–ª–∏–∑–∫–∏—Ö –ø–æ—Ä–æ—Ö–æ–≤ –∫ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é:")
    print(f"{'–ú–∞—Ä–∫–∞':<25} {'I_e (–ú–ü–∞¬∑—Å)':<12} {'–†–∞–∑–Ω–∏—Ü–∞':<12} {'%':<8} {'B':<6} {'z_e':<6}")
    print("-" * 75)
    for i, (name, impulse, diff, diff_percent) in enumerate(best_matches[:10]):
        powder_data = powders_db[name]
        print(f"{i+1:2}. {name:<22} {impulse:<12.3f} {diff:<12.3f} {diff_percent:+.1f}% {powder_data['B_value']:<6} {powder_data['z_e']:<6}")

def create_approved_powders_file(results, powders_db, params, powder_type, best_count=10):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ—Ä–æ—Ö–∞–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    
    if not results:
        print(f"‚ö†Ô∏è  –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {powder_type}")
        return None
    
    calculated_impulses = [r['I_e'] for r in results]
    avg_impulse = sum(calculated_impulses) / len(calculated_impulses)
    
    min_calc_impulse = min(calculated_impulses)
    max_calc_impulse = max(calculated_impulses)
    
    suitable_powders = {}
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ—Ä–æ—Ö–∞ (—Ç–æ–ª—å–∫–æ —Å –∏–º–ø—É–ª—å—Å–æ–º <= MAX_IMPULSE)
    for powder_name, powder_data in powders_db.items():
        powder_impulse = powder_data['I_e']
        if powder_impulse > MAX_IMPULSE:
            continue
            
        if min_calc_impulse <= powder_impulse <= max_calc_impulse:
            suitable_powders[powder_name] = powder_data
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–µ –ø–æ—Ä–æ—Ö–∞ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
    best_powders = set()
    if suitable_powders:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Ä–æ—Ö–∞ –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ —Å—Ä–µ–¥–Ω–µ–º—É –∏–º–ø—É–ª—å—Å—É
        sorted_powders = sorted(
            suitable_powders.items(),
            key=lambda x: abs(x[1]['I_e'] - avg_impulse)
        )
        # –ë–µ—Ä–µ–º —Ç–æ–ø-5 —Å–∞–º—ã—Ö –±–ª–∏–∑–∫–∏—Ö
        top_count = min(5, len(sorted_powders))
        best_powders = {name for name, _ in sorted_powders[:top_count]}
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    filename = f"approved_{powder_type}.py"
    
    file_content = f"""# –§–∞–π–ª —Å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º–∏ {powder_type} –ø–æ—Ä–æ—Ö–∞–º–∏
# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—Ä—å–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ª–æ–≤–Ω–æ–≥–æ –ø–æ—Ä–æ—Ö–∞: {params['name']}
# f={params['f']:.3e} –î–∂/–∫–≥, k={params['k']:.3f}, b={params['b']:.3e} –º¬≥/–∫–≥, delta={params['delta']} –∫–≥/–º¬≥
# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–º–ø—É–ª—å—Å: {MAX_IMPULSE} –ú–ü–∞¬∑—Å

# –î–ò–ê–ü–ê–ó–û–ù –†–ê–°–°–ß–ò–¢–ê–ù–ù–´–• –ò–ú–ü–£–õ–¨–°–û–í: {min_calc_impulse:.4f} - {max_calc_impulse:.4f} –ú–ü–∞¬∑—Å
# –°–†–ï–î–ù–ò–ô –ò–ú–ü–£–õ–¨–°: {avg_impulse:.4f} –ú–ü–∞¬∑—Å

approved_powders = {{
"""
    
    for powder_name in sorted(suitable_powders.keys()):
        powder_data = suitable_powders[powder_name]
        powder_impulse = powder_data['I_e']
        difference = powder_impulse - avg_impulse
        difference_percent = (difference / avg_impulse) * 100
        
        if powder_name in best_powders:
            file_content += f"    # ‚òÖ –õ–£–ß–®–ò–ô –í–ê–†–ò–ê–ù–¢ - {powder_name} (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {difference:+.3f} –ú–ü–∞¬∑—Å, {difference_percent:+.1f}%)\n"
        else:
            file_content += f"    # {powder_name} (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ: {difference:+.3f} –ú–ü–∞¬∑—Å, {difference_percent:+.1f}%)\n"
        
        file_content += f"    '{powder_name}': {{\n"
        for key, value in powder_data.items():
            if key == 'B_value':  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –ø–æ–ª–µ
                continue
            if isinstance(value, float):
                file_content += f"        '{key}': {value:.3f},\n"
            else:
                file_content += f"        '{key}': {value},\n"
        file_content += "    },\n\n"
    
    file_content += "}\n\n"
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(file_content)
    
    print(f"\n‚úÖ –§–∞–π–ª '{filename}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    print(f"üìä –í—Å–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–æ –ø–æ—Ä–æ—Ö–æ–≤: {len(suitable_powders)}")
    print(f"üèÜ –õ—É—á—à–∏—Ö –ø–æ—Ä–æ—Ö–æ–≤ –≤—ã–¥–µ–ª–µ–Ω–æ: {len(best_powders)}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Ä–æ—Ö–æ–≤
    if suitable_powders:
        print(f"\nüìà –ê–ù–ê–õ–ò–ó –ü–û–î–•–û–î–Ø–©–ò–• –ü–û–†–û–•–û–í:")
        print(f"{'–ú–∞—Ä–∫–∞':<25} {'I_e (–ú–ü–∞¬∑—Å)':<12} {'–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ':<15} {'%':<8} {'B':<6} {'z_e':<6}")
        print("-" * 75)
        for powder_name in sorted(suitable_powders.keys()):
            powder_data = suitable_powders[powder_name]
            powder_impulse = powder_data['I_e']
            difference = powder_impulse - avg_impulse
            difference_percent = (difference / avg_impulse) * 100
            
            marker = "‚òÖ " if powder_name in best_powders else "  "
            print(f"{marker}{powder_name:<23} {powder_impulse:<12.3f} {difference:+.3f} –ú–ü–∞¬∑—Å   {difference_percent:+.1f}% {powder_data['B_value']:<6} {powder_data['z_e']:<6}")
    
    return filename

# –ó–ê–ü–£–°–ö –†–ê–°–ß–ï–¢–û–í –î–õ–Ø –û–ë–û–ò–• –¢–ò–ü–û–í –ü–û–†–û–•–û–í

# 1. –†–∞—Å—á–µ—Ç –¥–ª—è –±–∞–ª–ª–∏—Å—Ç–∏—Ç–Ω—ã—Ö –ø–æ—Ä–æ—Ö–æ–≤
print(f"\n{'='*90}")
print("üöÄ –ó–ê–ü–£–°–ö –†–ê–°–ß–ï–¢–ê –î–õ–Ø –ë–ê–õ–õ–ò–°–¢–ò–¢–ù–´–• –ü–û–†–û–•–û–í")
print(f"{'='*90}")
ballistic_results = vary_parameters_for_powder_type(
    ballistic_params, '–ë–ê–õ–õ–ò–°–¢–ò–¢–ù–´–•', ballistic_powders
)
if ballistic_results:
    print_detailed_matching_analysis(ballistic_results, ballistic_powders, "–ë–ê–õ–õ–ò–°–¢–ò–¢–ù–´–•")
    ballistic_file = create_approved_powders_file(
        ballistic_results, ballistic_powders, ballistic_params, 'ballistic'
    )
else:
    ballistic_file = None
    print("‚ùå –ù–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –±–∞–ª–ª–∏—Å—Ç–∏—Ç–Ω—ã—Ö –ø–æ—Ä–æ—Ö–æ–≤")

# 2. –†–∞—Å—á–µ—Ç –¥–ª—è –ø–∏—Ä–æ–∫—Å–∏–ª–∏–Ω–æ–≤—ã—Ö –ø–æ—Ä–æ—Ö–æ–≤
print(f"\n{'='*90}")
print("üöÄ –ó–ê–ü–£–°–ö –†–ê–°–ß–ï–¢–ê –î–õ–Ø –ü–ò–†–û–ö–°–ò–õ–ò–ù–û–í–´–• –ü–û–†–û–•–û–í")
print(f"{'='*90}")
pyroxylin_results = vary_parameters_for_powder_type(
    pyroxylin_params, '–ü–ò–†–û–ö–°–ò–õ–ò–ù–û–í–´–•', pyroxylin_powders
)
if pyroxylin_results:
    print_detailed_matching_analysis(pyroxylin_results, pyroxylin_powders, "–ü–ò–†–û–ö–°–ò–õ–ò–ù–û–í–´–•")
    pyroxylin_file = create_approved_powders_file(
        pyroxylin_results, pyroxylin_powders, pyroxylin_params, 'pyroxylin'
    )
else:
    pyroxylin_file = None
    print("‚ùå –ù–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–∏—Ä–æ–∫—Å–∏–ª–∏–Ω–æ–≤—ã—Ö –ø–æ—Ä–æ—Ö–æ–≤")

print(f"\n{'='*90}")
print("üéâ –†–ê–°–ß–ï–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
if ballistic_file or pyroxylin_file:
    print("üìÅ –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã:")
    if ballistic_file:
        print(f"   ‚Ä¢ {ballistic_file}")
    if pyroxylin_file:
        print(f"   ‚Ä¢ {pyroxylin_file}")
else:
    print("‚ùå –§–∞–π–ª—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã - –Ω–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
print(f"{'='*90}")